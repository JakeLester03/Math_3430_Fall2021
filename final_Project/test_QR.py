import LA
import QR
import pytest

def test_GramSchmidt():
  matrix_c = [[1,1,1,1],[3,2,3,2],[6,2,8,4]]
  matrix_d = [[0,-1,-1],[1,1,1],[2,1,3]]
  assert QR.GramSchmidt(matrix_c) == ([[[0.5, 0.5, 0.5, 0.5], [0.5, -0.5, 0.5, -0.5], [-0.5, -0.5, 0.5, 0.5]], [[2.0, 0, 0], [5.0, 1.0, 0], [10.0, 4.0, 2.0]]])
  assert QR.GramSchmidt(matrix_d) == ([[[0.0, -0.7071067811865475, -0.7071067811865475], [1.0, 2.220446049250313e-16, 2.220446049250313e-16], [0.0, -0.7071067811865475, 0.7071067811865475]],
                                    [[1.414213562373095, 0, 0], [-1.414213562373095, 1.0, 0], [-2.82842712474619, 2.0, 1.414213562373095]]])

def test_orthonormal_vectors():
  matrix_c = [[1,1,1,1],[3,2,3,2],[6,2,8,4]]
  matrix_e = [[0,-1], [1,2]]
  assert QR.orthonormal_vectors(matrix_c) == ([[0.5, 0.5, 0.5, 0.5], [0.5, -0.5, 0.5, -0.5], [-0.5, -0.5, 0.5, 0.5]])
  assert QR.orthonormal_vectors(matrix_e) == ([[0.0, -1.0], [1.0, 0.0]])

def test_Identity():
    matrix_size_a = 3
    matrix_size_b = 1
    assert QR.Identity(matrix_size_a) == [[1,0,0], [0,1,0], [0,0,1]]
    assert QR.Identity(matrix_size_b) == [[1]]

def test_sign():
    n = 2
    n_2 = -2
    assert QR.sign(n) == 1
    assert QR.sign(n_2) == -1

def test_complex_conjugate():
    scalar_1 = 2-1j
    scalar_2 = 2
    assert QR.complex_conjugate(scalar_1) == 2+1j
    assert QR.complex_conjugate(scalar_2) == 2

def test_conjugate_transpose():
    test_1 = [[1,2], [3,4]]
    test_2 = [[1,0],[1,1]]
    assert QR.conjugate_transpose(test_1) == [[1,3],[2,4]]
    assert QR.conjugate_transpose(test_2) == [[1,1],[0,1]]

def test_v_reflection():
    vector_a = [1,0,0]
    vector_b = [2,1,2]
    assert QR.v_reflection(vector_a) == [2.0, 0.0, 0.0]
    assert QR.v_reflection(vector_b) == [5.0, 1.0, 2.0]

def test_vector_vector_mult():
    vecmult = [1,2,3]
    vecmult_2 = [2,2,2]
    assert QR.vector_vector_mult(vecmult, vecmult_2) == ([[2, 2, 2], [4, 4, 4], [6, 6, 6]])
    assert QR.vector_vector_mult(vecmult_2, vecmult) == ([[2, 4, 6], [2, 4, 6], [2, 4, 6]])

def test_F_builder():
    vector_F = [3,2,1]
    vector_F2 = [1,0,0]
    assert QR.F_builder(vector_F) == ([[-0.2857142857142856, -0.8571428571428571, -0.42857142857142855], [-0.8571428571428571, 0.4285714285714286, -0.2857142857142857], [-0.42857142857142855, -0.2857142857142857, 0.8571428571428572]])
    assert QR.F_builder(vector_F2) == ([[-1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]])

def test_deep_copy():
    deep_matrix_1 = [[1,1,1],[2,2,2], [3,3,3]]
    deep_matrix_2 = [[0,1,1],[1,1,1],[2,2,2]]
    assert QR.deep_copy(deep_matrix_1) == [[1, 1, 1], [2, 2, 2], [3, 3, 3]]
    assert QR.deep_copy(deep_matrix_2) == [[0,1,1],[1,1,1],[2,2,2]]

def test_Q_builder():
    matrix_f = [[1,1,1], [-1,4,4], [4,-2,0]]
    k_1 = 0
    matrix_γ = [[1,2,3],[-3,5,9],[1,-2,0]]
    assert QR.Q_builder(matrix_f, k_1) == ([[-0.577350269189626, -0.5773502691896258, -0.5773502691896258], [-0.5773502691896258, 0.7886751345948129, -0.21132486540518713], [-0.5773502691896258, -0.21132486540518713, 0.7886751345948129]])
    assert QR.Q_builder(matrix_γ, k_1) == ([[-0.2672612419124245, -0.5345224838248489, -0.8017837257372733], [-0.5345224838248489, 0.7745419205884382, -0.33818711911734267], [-0.8017837257372733, -0.33818711911734267, 0.492719321323986]])

def test_Householder():
  matrix_f = [[1,1,1], [-1,4,4], [4,-2,0]]
  matrix_γ = [[1,2,3],[-3,5,9],[1,-2,0]]
  assert QR.Householder(matrix_f) == ([[[-0.577350269189626, -0.5773502691896258, -0.5773502691896258], [0.8164965809277259, -0.4082482904638628, -0.408248290463863], [5.551115123125783e-17, 0.7071067811865475, -0.7071067811865476]], [[-1.7320508075688776, 1.5700924586837747e-16, 1.232595164407831e-32], [-4.041451884327381, -4.0824829046386295, -4.440892098500626e-16], [-1.1547005383792521, 4.0824829046386295, -1.414213562373095]]])
  assert QR.Householder(matrix_γ) == ([[[-0.2672612419124245, -0.5345224838248489, -0.8017837257372733], [0.9532825604327254, -0.025086383169282078, -0.3010365980313868], [-0.14079697633917954, 0.8447818580350775, -0.5162555799103252]], [[-3.741657386773942, 7.920012943087602e-16, -1.1697621683624575e-16], [-9.08688222502243, -5.694608979427069, -1.3322676295501878e-15], [0.8017837257372733, 1.0034553267712896, -1.8303606924093345]]])

  